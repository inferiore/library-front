{"ast":null,"code":"// FILE: store.ts\nimport { create } from 'zustand';\nconst getUserFromLocalStorage = () => {\n  const userData = localStorage.getItem('user');\n  return userData ? JSON.parse(userData) : null;\n};\nconst useStore = create(set => ({\n  books: [],\n  borrowings: [],\n  user: getUserFromLocalStorage(),\n  isLoading: false,\n  setBooks: books => set(() => ({\n    books\n  })),\n  addBook: book => set(state => ({\n    books: [...state.books, book]\n  })),\n  updateBook: (bookId, updatedBook) => set(state => ({\n    books: state.books.map(book => book.id === bookId ? {\n      ...book,\n      ...updatedBook\n    } : book)\n  })),\n  removeBook: bookId => set(state => ({\n    books: state.books.filter(book => book.id !== bookId)\n  })),\n  addBorrowing: borrowing => set(state => ({\n    borrowings: [...state.borrowings, borrowing]\n  })),\n  returnBorrowing: borrowingId => set(state => ({\n    borrowings: state.borrowings.map(borrowing => borrowing.id === borrowingId ? {\n      ...borrowing,\n      returnDate: new Date().toISOString()\n    } : borrowing)\n  })),\n  setUser: user => set(() => {\n    localStorage.setItem('user', JSON.stringify(user));\n    return {\n      user\n    };\n  }),\n  clearUser: () => set(() => {\n    localStorage.removeItem('user');\n    return {\n      user: null\n    };\n  })\n}));\nexport default useStore;","map":{"version":3,"names":["create","getUserFromLocalStorage","userData","localStorage","getItem","JSON","parse","useStore","set","books","borrowings","user","isLoading","setBooks","addBook","book","state","updateBook","bookId","updatedBook","map","id","removeBook","filter","addBorrowing","borrowing","returnBorrowing","borrowingId","returnDate","Date","toISOString","setUser","setItem","stringify","clearUser","removeItem"],"sources":["/Users/ederbarrios/Projects/Tests/Claude/library-react/mi-app/src/store/store.ts"],"sourcesContent":["// FILE: store.ts\nimport { create } from 'zustand';\n\ninterface Book {\n  id: number;\n  title: string;\n  author: string;\n  genre: string;\n  isbn: string;\n  total_copies: number;\n  available_copies: number;\n  created_at: string;\n  updated_at: string;\n}\n\ninterface Borrowing {\n  id: string;\n  bookId: string;\n  userId: string;\n  borrowedDate: string;\n  returnDate?: string;\n}\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  token: string;\n  role: 'librarian' | 'member';\n}\n\ninterface AppState {\n  books: Book[];\n  borrowings: Borrowing[];\n  user: User | null;\n  isLoading: boolean;\n  setBooks: (books: Book[]) => void;\n  addBook: (book: Book) => void;\n  updateBook: (bookId: number, book: Partial<Book>) => void;\n  removeBook: (bookId: number) => void;\n  addBorrowing: (borrowing: Borrowing) => void;\n  returnBorrowing: (borrowingId: string) => void;\n  setUser: (user: User) => void;\n  clearUser: () => void;\n  setLoading: (loading: boolean) => void;\n}\n\nconst getUserFromLocalStorage = (): User | null => {\n  const userData = localStorage.getItem('user');\n  return userData ? JSON.parse(userData) : null;\n};\n\nconst useStore = create<AppState>((set) => ({\n  books: [],\n  borrowings: [],\n  user: getUserFromLocalStorage(),\n  isLoading: false,\n  setBooks: (books) =>\n    set(() => ({\n      books,\n    })),\n  addBook: (book) =>\n    set((state) => ({\n      books: [...state.books, book],\n    })),\n  updateBook: (bookId, updatedBook) =>\n    set((state) => ({\n      books: state.books.map((book) =>\n        book.id === bookId ? { ...book, ...updatedBook } : book\n      ),\n    })),\n  removeBook: (bookId) =>\n    set((state) => ({\n      books: state.books.filter((book) => book.id !== bookId),\n    })),\n  addBorrowing: (borrowing) =>\n    set((state) => ({\n      borrowings: [...state.borrowings, borrowing],\n    })),\n  returnBorrowing: (borrowingId) =>\n    set((state) => ({\n      borrowings: state.borrowings.map((borrowing) =>\n        borrowing.id === borrowingId ? { ...borrowing, returnDate: new Date().toISOString() } : borrowing\n      ),\n    })),\n  setUser: (user) =>\n    set(() => {\n      localStorage.setItem('user', JSON.stringify(user));\n      return { user };\n    }),\n  clearUser: () =>\n    set(() => {\n      localStorage.removeItem('user');\n      return { user: null };\n    }),\n}));\n\nexport default useStore;"],"mappings":"AAAA;AACA,SAASA,MAAM,QAAQ,SAAS;AA8ChC,MAAMC,uBAAuB,GAAGA,CAAA,KAAmB;EACjD,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;EAC7C,OAAOF,QAAQ,GAAGG,IAAI,CAACC,KAAK,CAACJ,QAAQ,CAAC,GAAG,IAAI;AAC/C,CAAC;AAED,MAAMK,QAAQ,GAAGP,MAAM,CAAYQ,GAAG,KAAM;EAC1CC,KAAK,EAAE,EAAE;EACTC,UAAU,EAAE,EAAE;EACdC,IAAI,EAAEV,uBAAuB,CAAC,CAAC;EAC/BW,SAAS,EAAE,KAAK;EAChBC,QAAQ,EAAGJ,KAAK,IACdD,GAAG,CAAC,OAAO;IACTC;EACF,CAAC,CAAC,CAAC;EACLK,OAAO,EAAGC,IAAI,IACZP,GAAG,CAAEQ,KAAK,KAAM;IACdP,KAAK,EAAE,CAAC,GAAGO,KAAK,CAACP,KAAK,EAAEM,IAAI;EAC9B,CAAC,CAAC,CAAC;EACLE,UAAU,EAAEA,CAACC,MAAM,EAAEC,WAAW,KAC9BX,GAAG,CAAEQ,KAAK,KAAM;IACdP,KAAK,EAAEO,KAAK,CAACP,KAAK,CAACW,GAAG,CAAEL,IAAI,IAC1BA,IAAI,CAACM,EAAE,KAAKH,MAAM,GAAG;MAAE,GAAGH,IAAI;MAAE,GAAGI;IAAY,CAAC,GAAGJ,IACrD;EACF,CAAC,CAAC,CAAC;EACLO,UAAU,EAAGJ,MAAM,IACjBV,GAAG,CAAEQ,KAAK,KAAM;IACdP,KAAK,EAAEO,KAAK,CAACP,KAAK,CAACc,MAAM,CAAER,IAAI,IAAKA,IAAI,CAACM,EAAE,KAAKH,MAAM;EACxD,CAAC,CAAC,CAAC;EACLM,YAAY,EAAGC,SAAS,IACtBjB,GAAG,CAAEQ,KAAK,KAAM;IACdN,UAAU,EAAE,CAAC,GAAGM,KAAK,CAACN,UAAU,EAAEe,SAAS;EAC7C,CAAC,CAAC,CAAC;EACLC,eAAe,EAAGC,WAAW,IAC3BnB,GAAG,CAAEQ,KAAK,KAAM;IACdN,UAAU,EAAEM,KAAK,CAACN,UAAU,CAACU,GAAG,CAAEK,SAAS,IACzCA,SAAS,CAACJ,EAAE,KAAKM,WAAW,GAAG;MAAE,GAAGF,SAAS;MAAEG,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IAAE,CAAC,GAAGL,SAC1F;EACF,CAAC,CAAC,CAAC;EACLM,OAAO,EAAGpB,IAAI,IACZH,GAAG,CAAC,MAAM;IACRL,YAAY,CAAC6B,OAAO,CAAC,MAAM,EAAE3B,IAAI,CAAC4B,SAAS,CAACtB,IAAI,CAAC,CAAC;IAClD,OAAO;MAAEA;IAAK,CAAC;EACjB,CAAC,CAAC;EACJuB,SAAS,EAAEA,CAAA,KACT1B,GAAG,CAAC,MAAM;IACRL,YAAY,CAACgC,UAAU,CAAC,MAAM,CAAC;IAC/B,OAAO;MAAExB,IAAI,EAAE;IAAK,CAAC;EACvB,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,eAAeJ,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}